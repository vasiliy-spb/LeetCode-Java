package matrix.workingPeoplesImitation.task_1466_Reorder_Routes_to_Make_All_Paths_Lead_to_the_City_Zero;

import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class Tests {
    private final Solution testingClass = new Solution();

    @Test
    public void checkTestcase1() {
        int n = 6;
        int[][] connections = {{0, 1}, {1, 3}, {2, 3}, {4, 0}, {4, 5}};
        int expected = 3;
        assertEquals(expected, testingClass.minReorder(n, connections));
    }

    @Test
    public void checkTestcase2() {
        int n = 5;
        int[][] connections = {{1, 0}, {1, 2}, {3, 2}, {3, 4}};
        int expected = 2;
        assertEquals(expected, testingClass.minReorder(n, connections));
    }

    @Test
    public void checkTestcase3() {
        int n = 3;
        int[][] connections = {{1, 0}, {2, 0}};
        int expected = 0;
        assertEquals(expected, testingClass.minReorder(n, connections));
    }

    @Test
    public void checkTestcase4() { // 12 / 76 testcases passed
        int n = 5;
        int[][] connections = {{4, 3}, {2, 3}, {1, 2}, {1, 0}};
        int expected = 2;
        assertEquals(expected, testingClass.minReorder(n, connections));
    }

    @Test
    public void checkTestcase5() { // 13 / 76 testcases passed
        int n = 10;
        int[][] connections = {{0, 1}, {2, 1}, {3, 2}, {0, 4}, {5, 1}, {2, 6}, {5, 7}, {3, 8}, {8, 9}};
        int expected = 6;
        assertEquals(expected, testingClass.minReorder(n, connections));
    }

    @Test
    public void checkTestcase6() { // 44 / 76 testcases passed
        int n = 349;
        int[][] connections = {{1,0},{2,0},{3,0},{0,4},{4,5},{6,4},{7,6},{7,8},{8,9},{10,7},{11,3},{10,12},{13,5},{14,12},{15,12},{16,4},{11,17},{14,18},{19,14},{19,20},{5,21},{6,22},{23,14},{19,24},{25,9},{0,26},{15,27},{28,0},{27,29},{11,30},{26,31},{8,32},{33,26},{33,34},{30,35},{32,36},{37,6},{38,9},{13,39},{25,40},{41,11},{40,42},{7,43},{8,44},{45,30},{2,46},{20,47},{48,36},{49,47},{50,36},{3,51},{39,52},{53,43},{54,15},{29,55},{33,56},{28,57},{58,37},{59,23},{60,15},{61,59},{62,50},{63,39},{4,64},{65,2},{66,50},{27,67},{48,68},{69,18},{28,70},{34,71},{0,72},{56,73},{74,49},{25,75},{12,76},{75,77},{78,24},{79,4},{80,46},{81,15},{79,82},{83,39},{84,51},{30,85},{32,86},{87,15},{52,88},{89,56},{90,31},{67,91},{52,92},{89,93},{94,25},{95,27},{33,96},{97,3},{98,76},{80,99},{100,39},{65,101},{16,102},{103,51},{104,30},{105,84},{2,106},{107,19},{91,108},{109,42},{107,110},{96,111},{112,56},{86,113},{114,9},{9,115},{32,116},{117,59},{68,118},{3,119},{120,6},{121,57},{122,106},{15,123},{82,124},{54,125},{126,44},{127,51},{35,128},{36,129},{107,130},{19,131},{132,16},{133,43},{53,134},{135,2},{37,136},{137,47},{138,26},{121,139},{140,18},{61,141},{4,142},{109,143},{26,144},{145,75},{84,146},{147,84},{90,148},{137,149},{150,0},{151,43},{152,56},{153,7},{154,75},{58,155},{156,140},{157,81},{44,158},{159,109},{66,160},{74,161},{158,162},{163,110},{113,164},{128,165},{97,166},{142,167},{168,24},{169,64},{170,14},{171,153},{172,114},{173,31},{29,174},{78,175},{176,126},{177,53},{178,60},{179,75},{180,17},{181,171},{182,45},{94,183},{35,184},{185,132},{186,106},{82,187},{59,188},{189,177},{97,190},{191,66},{192,151},{193,155},{194,87},{149,195},{196,92},{144,197},{46,198},{162,199},{82,200},{201,35},{63,202},{203,121},{85,204},{181,205},{84,206},{169,207},{208,148},{114,209},{210,120},{93,211},{212,54},{213,151},{214,78},{215,174},{82,216},{217,22},{218,213},{46,219},{212,220},{221,4},{222,127},{10,223},{178,224},{128,225},{47,226},{227,181},{228,108},{159,229},{230,209},{231,142},{68,232},{233,225},{157,234},{28,235},{236,55},{237,81},{157,238},{239,45},{240,32},{238,241},{158,242},{243,17},{235,244},{114,245},{246,70},{247,224},{248,94},{249,209},{180,250},{251,125},{138,252},{253,122},{254,161},{222,255},{252,256},{31,257},{23,258},{259,65},{260,180},{261,195},{262,73},{263,105},{264,224},{265,16},{149,266},{267,245},{203,268},{269,130},{73,270},{271,158},{272,171},{28,273},{132,274},{275,240},{276,151},{277,193},{60,278},{191,279},{111,280},{54,281},{282,100},{215,283},{284,95},{1,285},{286,178},{287,203},{164,288},{173,289},{141,290},{291,212},{292,264},{293,51},{40,294},{252,295},{4,296},{288,297},{298,73},{299,85},{124,300},{137,301},{302,9},{303,151},{304,140},{183,305},{306,73},{307,45},{135,308},{169,309},{122,310},{311,36},{218,312},{313,77},{314,240},{104,315},{316,105},{108,317},{71,318},{319,316},{320,165},{321,301},{100,322},{323,202},{286,324},{325,241},{193,326},{327,241},{225,328},{329,191},{330,305},{127,331},{160,332},{333,295},{29,334},{335,144},{273,336},{151,337},{48,338},{338,339},{9,340},{341,123},{112,342},{343,250},{344,244},{27,345},{346,278},{92,347},{292,348}};
        int expected = 173;
        assertEquals(expected, testingClass.minReorder(n, connections));
    }

}
